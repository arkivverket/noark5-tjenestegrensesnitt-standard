#!/usr/bin/python3

"""Read all class relations from chapter 7, and print PlantUML diagram
data for all classes listed in this chapter.  This is useful for
verifying the relations and comparing them with the other UML
diagrams.

Run like this to generate a UML diagram image:

```
bin/text2uml  | plantuml -p > uml-relations.png
```

"""

import os.path
import re
from collections import OrderedDict
from lxml import etree

import docutils.nodes
import docutils.parsers.rst
import docutils.utils
import docutils.frontend

classes = {}
links = {}


class RstVisitor(docutils.nodes.NodeVisitor):
    classes = {}
    package = None
    entityname = None
    intable = False
    sectionlevel = 0

    def visit_section(self, node: docutils.nodes.reference) -> None:
        self.sectionlevel += 1
        #print("section:", node)

    def depart_section(self, node: docutils.nodes.reference) -> None:
        self.sectionlevel -= 1

    def visit_table(self, node: docutils.nodes.reference) -> None:
        """Called for "table" nodes."""
        self.entry = {}
        self.header = {}
        self.tabletitle = None
        self.intable = True

    def visit_title(self, node: docutils.nodes.reference) -> None:
        #print(node)
        t = node.astext()
        if self.intable:
            t = re.sub(r'\s*:header-rows:[^\n]*(\n|$)', '', t)
            t = re.sub(r'\s*:widths:[^\n]*(\n|$)', '', t)
            #print("title:", t)
            self.tabletitle = t
        else:
            #print("sectionlevel %s title %s" % (self.sectionlevel, t))
            if 3 == self.sectionlevel:
                self.package = [t]
            elif 3 < self.sectionlevel:
                self.package.append(t)
            else:
                pass


    def visit_paragraph(self, node: docutils.nodes.reference) -> None:
        #print("Para:", node)
        line = node.astext()
        m = re.match('^Type: (\S+)( «(.+)»)?$', line)
        if m:
            fullname = ".".join(self.package)
            package = ".".join(self.package[:-1])
            self.entityname = self.package[-1]
            self.package = self.package[:-1]
            if self.entityname not in self.classes:
                self.classes[self.entityname] = {}
                self.classes[self.entityname]['package'] = package
                self.classes[self.entityname]['fullname'] = fullname
            classtype = m.group(1)
            stereotype = m.group(3)
            if stereotype:
                self.classes[self.entityname]['stereotype'] = stereotype
        m = re.match('^Arver: (.+)$', line)
        if m:
            inherit = m.group(1)
            self.classes[self.entityname]['inherit'] = inherit


    @staticmethod
    def relation(f):
        if -1 != f.find(" "):
            s = re.split(r" +", f)
            c = s[-1]
            return (c, "\"" + " ".join(s[:-1]) + "\"")
        else:
            return (f, None)

    @staticmethod
    def process(link, f):
        (c0,f0) = RstVisitor.relation(f[0])
        (c1,f1) = RstVisitor.relation(f[1])
        if f0 is not None and f1 is not None:
            links[(c1, f1, link, f0, c0)] = True
        elif f0 is None and f1 is not None:
            links[(c1, f1, link, c0)] = True
        elif f0 is not None and f1 is None:
            links[(c1, link, f0, c0)] = True
        else:
            links[(c1, link, c0)] = True

    def visit_row(self, node: docutils.nodes.reference) -> None:
        """Called for "table row" nodes."""
        #print(node)
        if self.tabletitle not in ('Relasjoner', 'Attributter',
                                   'Kodeliste'):
            return
        if not self.header:
            col = 0
            while node.children:
                field = node.children.pop(0).astext()
                self.header[col] = field
                col += 1
            return

        f = []
        while node.children:
            f.append(node.children.pop(0).astext())

        if  'Relasjoner' == self.tabletitle:
            if 'Generalization (Source → Destination)' == f[0] :
                self.process('<|--', f[1:])
            elif 'Aggregation (Bi-Directional)' == f[0] :
                self.process('o-->', f[1:])
            elif 'Aggregation (Destination → Source)' == f[0] :
                self.process('o--', f[1:])
            elif 'Association (Source → Destination)' == f[0] :
                self.process('*--', f[1:])
            elif 'Association (Destination → Source)' == f[0] :
                # Swap order to normalise relations and avoid
                # duplicate links
                self.process('*--', f[2:0:-1])
            # FIXME check if this one are correct
            elif 'Association (Bi-Directional)' == f[0] :
                self.process('*-->', f[1:])
            else:
                print("' error: unknown relation %s" % (f[0]))
        elif 'Attributter' == self.tabletitle:
            #print("Attributter for %s" % self.entityname)
            if self.entityname not in self.classes:
                self.classes[self.entityname] = {}
            if 'attributes' not in self.classes[self.entityname]:
                self.classes[self.entityname]['attributes'] = {}
            self.classes[self.entityname]['attributes'][f[0]] = {
                'merknad' : f[1].strip(),
                'multip' : f[2].replace('[1..1]', '').strip(),
                'code' : f[3].strip(),
                'type' : f[4].strip(),
            }
            #print("Klasse %s:" % self.entityname, self.classes[self.entityname])
        elif 'Kodeliste' == self.tabletitle:
            if 'codes' not in self.classes[self.entityname]:
                self.classes[self.entityname]['codes'] = {}
            self.classes[self.entityname]['codes'][f[0]] = {
                'merknad' : f[1].strip(),
                'code' : f[2].strip(),
            }
            #print("Kodeliste %s:" % self.entityname, self.classes[self.entityname])

    def depart_table(self, node: docutils.nodes.Node) -> None:
        """Called when leaving a table."""
        self.intable = False

    def unknown_visit(self, node: docutils.nodes.Node) -> None:
        """Called for all other node types."""
        #print("unknown:", node)
        pass

    def unknown_departure(self, node: docutils.nodes.Node) -> None:
        """Called for all other node types."""
        pass

def parse_rst(text: str) -> docutils.nodes.document:
    parser = docutils.parsers.rst.Parser()
    components = (docutils.parsers.rst.Parser,)
    settings = docutils.frontend.OptionParser(components=components).get_default_values()
    document = docutils.utils.new_document('<rst-doc>', settings=settings)
    parser.parse(text, document)
    return document

def load2fieldmetadata(filepath):
    fieldnames = {}
    parser = etree.XMLParser(remove_blank_text=True)
    with open(os.path.join(filepath, "metadatakatalog.xsd")) as fh:
        tree = etree.parse(fh, parser)
    element = tree.getroot()
    for sub in element.iterchildren():
        if "{http://www.w3.org/2001/XMLSchema}simpleType" == sub.tag:
            fieldnames[sub.get('name')] = True
    with open(os.path.join(filepath, "arkivstruktur.xsd")) as fh:
        tree = etree.parse(fh, parser)
    element = tree.getroot()
    for sub in element.iterchildren():
        if "{http://www.w3.org/2001/XMLSchema}complexType" == sub.tag:
            fieldnames[sub.get('name')] = True
    return fieldnames

with open('kapitler/07-tjenester_og_informasjonsmodell.rst') as f:
    content = f.read()
    doc = parse_rst(content)
    visitor = RstVisitor(doc)
    visitor.classes = classes
    doc.walkabout(visitor)
    classes = visitor.classes

def c2full(c):
    if c in classes:
        return classes[c]['fullname']
    return c


# Enable to compare with meta data directory
fieldnames = None # load2fieldmetadata("../noark5-tester/noark5-schema/v4.0/")

# Automatically add relations to data types and metadata, after all
# classes are loaded.  Need to do it now, to know if a class is a data
# type or code list.
for c in classes.keys():
    if 'attributes' in classes[c]:
        for a in classes[c]['attributes'].keys():
            attrtype = classes[c]['attributes'][a]['type']
            # Composition to embedded datatype, ignore base types
            if attrtype not in ('any', 'boolean', 'date', 'datetime',
                                'decimal', 'integer', 'string', 'SystemID'):
                if 'attributes' in classes[attrtype]:
                    RstVisitor.process('*--', (attrtype, c))
                else:
                    # FIXME ignore code lists for now
                    #RstVisitor.process('--', (c, attrtype))
                    pass

print("@startuml")
print("scale max 4096 width")
print("skinparam nodesep 100")
print("hide members")

for c in sorted(classes.keys(), key=lambda x: classes[x]['fullname']):
    stereotype = "class"
    entry=""
    entry += "class %s" % c2full(c)
    if 'inherit' in classes[c]:
        entry += " <%s>" % classes[c]['inherit']
    if 'stereotype' in classes[c]:
        stereotype = classes[c]['stereotype']
        entry += " <<%s>>" % stereotype
    entry += " {\n"

    if 'codes' in classes[c]:
        for f in classes[c]['codes'].keys():
            if stereotype in ('codelist'):
                if -1 != f.find('('):
                    entry += "  {field} +%s = %s\n" % (f, classes[c]['codes'][f]['code'])
                elif '' != classes[c]['codes'][f]['code']:
                    kodename = classes[c]['codes'][f]['code']
                    m = re.match("^\[(.+)\]\(.+\)$", kodename)
                    if m:
                        kodename = m.group(1)
                    entry += "  +%s = %s\n" % (f, kodename)
                else:
                    entry += "  +%s\n" % f
    if 'attributes' in classes[c]:
        # stereotype dataType and class/default
        for f in classes[c]['attributes'].keys():
            if fieldnames and f not in fieldnames:
                entry += "' warning: unknown field %s.%s\n" % (classes[c]['fullname'], f)
            astr = "  +%s : %s %s" % (f, classes[c]['attributes'][f]['type'],
                                      classes[c]['attributes'][f]['multip'])
            entry += astr.rstrip() + "\n"
    entry += "}\n"

    filename = 'kapitler/media/uml-%s-%s.iuml' % (stereotype.lower(), c.lower())
    with open(filename, "w") as iuml:
        iuml.write("@startuml\n")
        iuml.write(entry)
        iuml.write("@enduml\n")

    filename = 'kapitler/media/uml-%s-%s.puml' % (stereotype.lower(), c.lower())
    with open(filename, "w") as puml:
        puml.write("@startuml\n")
        puml.write("skinparam nodesep 100\n")
        puml.write(entry)
        for link in sorted(links.keys()):
            rel = list(link)
            if c != rel[0] and c != rel[-1]:
                continue
            rel[0] = c2full(rel[0])
            rel[-1] = c2full(rel[-1])
            print
            puml.write(" ".join(rel))
            puml.write("\n")
        puml.write("@enduml\n")

    print(entry)

for link in sorted(links.keys()):
    rel = list(link)
    rel[0] = c2full(rel[0])
    rel[-1] = c2full(rel[-1])
    print(*rel)
print("@enduml")
